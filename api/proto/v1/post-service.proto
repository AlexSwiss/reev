syntax = "proto3";
package v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Post service";
		version: "1.0";
		contact: {
			name: "Reev";
			url: "https://github.com/AlexSwiss/reev";
			email: "alexyswiss@gmail.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

// Post to be added
message Post {
    // Unique integer identifier of the post
    int64 id = 1;
    // Title of the post
    string title = 2;
    // Detail description of the post
    string description = 3;
}

// Request data to create new post
message CreateRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // post entity to add
    Post post = 2;
}

// Response that contains data for created post
message CreateResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // ID of created post
    int64 id = 2;
}

// Rquest data to read a post
message ReadRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the post task
    int64 id = 2;
}

// Contains post data specified by the ID request
message ReadResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the post task
    Post post = 2;
}

// Request data to update a post
message UpdateRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the post task
    Post post = 2;
}

// Contains status ofupdate operation
message UpdateResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the post task
    int64 updated = 2;
}

// Request data to delete a post
message DeleteRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the post task
    int64 id = 2;
}

// contains status of deleted operation
message DeleteResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // Unique integer identifier of the post 
    int64 deleted = 2;
}

// Request data to read all post
message ReadAllRequest{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;
}

// Contains list of all post
message ReadAllResponse{
    // API versioning: it is my best practice to specify version explicitly
    string api = 1;

    // List of all post
    repeated Post posts = 2;
}

// Service to manage list of post
service PostService {
    // Create new post
    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/v1/post"
            body: "*"
        };
    };

    // Read Post task
    rpc Read(ReadRequest) returns (ReadResponse) {
        option (google.api.http) = {
            get: "/v1/post/{id}"
        };
    };

    // Update Post task
    rpc Update(UpdateRequest) returns (UpdateResponse) {
        option (google.api.http) = {
            put: "/v1/post/{post.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/post/{post.id}"
                body: "*"
            }
        };
    };

    // Delete Post task
    rpc Delete(DeleteRequest) returns (DeleteResponse) {
        option (google.api.http) = {
            delete: "/v1/post/{id}"
        };
    };

    // Read all Post tasks
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
        option (google.api.http) = {
            get: "/v1/post/all"
        };
    };
}